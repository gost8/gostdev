package main

import (
	"os"
	"text/template"
)

func generateOperations(schema *Schema) {
	const routesBody = `
package main

import "net/http"
{{range $key, $function := .}}
{{ range $oneCommentLine := split $function.Description }}
// {{ $oneCommentLine }}	{{ end }}
func {{ $function.Name }}(w http.ResponseWriter, r *http.Request) {
	// TODO func body
}
{{ end }}
`
	funcMap := template.FuncMap{
		"split": splitDescription,
	}

	t, err := template.New("operations").Funcs(funcMap).Parse(routesBody)
	if err != nil {
		panic(err)
	}

	err = t.Execute(os.Stdout, schema.Functions)
	if err != nil {
		panic(err)
	}
}

func generateRoutes(schema *Schema) {

	const routesBody = `
// generated by gostdev.
// DO NOT CHANGE THIS FILE!

package main

import "net/http"

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []Route

var (
	indexRoute = Route{
		"Index",
		"GET",
		"/",
		Index,
	}

	operationRoutes = map[string]Routes{
		{{range $key, $function := .}}
			{{ range $oneCommentLine := split $function.Description }}
			// {{ $oneCommentLine }}	{{ end }}
			Route{
				"{{ $function.Name }}",
				"{{ $function.Method }}",
				"{{ $function.Uri }}",
				{{ $function.Name }},
			},
		{{ end }}
	}
)
`
	funcMap := template.FuncMap{
		"split": splitDescription,
	}

	t, err := template.New("routes").Funcs(funcMap).Parse(routesBody)
	if err != nil {
		panic(err)
	}

	err = t.Execute(os.Stdout, schema.Functions)
	if err != nil {
		panic(err)
	}
}
